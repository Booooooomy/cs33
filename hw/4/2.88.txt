We are running programs on a machine where values of type int have a 32-bit twoâ€™s-complement representation. Values of type float use the 32-bit IEEE format, and values of type double use the 64-bit IEEE format.
We generate arbitrary integer values x, y, and z, and convert them to values of type double as follows:

    /* Create some arbitrary values */
    int x = random();
    int y = random();
    int z = random();

    /* Convert to double */
    double dx = (double) x;
    double dy = (double) y;
    double dz = (double) z;

For each of the following C expressions, you are to indicate whether or not the expression always yields 1. If it always yields 1, describe the underlying mathematical principles. Otherwise, give an example of arguments that make it yield 0. Note that you cannot use an IA32 machine running gcc to test your answers, since it would use the 80-bit extended-precision representation for both float and double.
    A. (float) x == (float) dx
    B. dx - dy == (double) (x - y)
    C. (dx + dy) + dz == dx + (dy + dz)
    D. (dx * dy) * dz == dx * (dy * dz)
    E. dx / dx == dz / dz

// ANSWERS
A. yes; if rounded, x and dx will be rounded the same way because they're both being converted to the same type with the same precision
B. no; yields zero if x = 0 and y = -2147483648 (min 32 bit integer)
C. yes; all the variables' values are in the 32 bit int range
D.
E. no; x = 0, y = 1
